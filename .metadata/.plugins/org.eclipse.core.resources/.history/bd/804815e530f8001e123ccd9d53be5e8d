package com.paulo.workshopmongo.resources;

import java.net.URI;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.paulo.workshopmongo.domain.User;
import com.paulo.workshopmongo.dto.UserDto;
import com.paulo.workshopmongo.service.UserService;

@RestController
@RequestMapping(value = "/users")
public class UserResources {

	@Autowired
	private UserService service;

	@GetMapping
	public ResponseEntity<List<UserDto>> findAll() {

		List<User> list = service.findAll();
		List<UserDto> userlist = list.stream().map(x -> new UserDto(x)).collect(Collectors.toList());
		return ResponseEntity.ok().body(userlist);
	}

	@GetMapping(value = "/{id}")
	public ResponseEntity<UserDto> findById(@PathVariable String id) {
		User obj = service.findById(id);

		return ResponseEntity.ok().body(new UserDto(obj));

	}

	@PostMapping
	public ResponseEntity<Void> insert(@RequestBody UserDto objDto) {
	    // Mapeia o UserDto para um objeto User
	    User user = service.fromDto(objDto);

	    // Insere o usuário no sistema
	    user = service.insert(user);

	    // Verifica se o usuário foi inserido corretamente
	    if (user == null) {
	        // Se o usuário for nulo, retorna uma resposta HTTP 500 (Internal Server Error)
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
	    }

	    // Constrói a URI para o novo recurso (provavelmente apenas adicionando o ID do usuário à URI atual)
	    URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(user.getId()).toUri();

	    // Retorna uma resposta HTTP 201 (Created) com a URI do novo recurso no cabeçalho Location
	    return ResponseEntity.created(uri).build();
	}

}
